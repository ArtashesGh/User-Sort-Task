//
//  UsersSortedListViewController.swift
//  Task
//
//  Created by Artashes Nok Nok on 3/20/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UsersSortedListDisplayLogic: class
{
    func displaySortedData(viewModel: UsersSortedList.FetchData.ViewModel)
}

class UsersSortedListViewController: UIViewController, UsersSortedListDisplayLogic
{
    var interactor: UsersSortedListBusinessLogic?
    var router: (NSObjectProtocol & UsersSortedListRoutingLogic & UsersSortedListDataPassing)?
    var displeyedData:[UsersListDispleyedModel] = []
    
    @IBOutlet weak var navigationView: UIView!
    @IBOutlet weak var tableView: UITableView!
    var refreshControl = UIRefreshControl()
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = UsersSortedListInteractor()
        let presenter = UsersSortedListPresenter()
        let router = UsersSortedListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        getUserList()
        refreshControl.addTarget(self, action: #selector(self.refresh(_:)), for: .valueChanged)
        tableView.addSubview(refreshControl) // not required when using UITableViewController
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        //        navigationView.roundCorners(corners: [.bottomLeft, .bottomRight], radius: 15.0)
        //        navigationView.addBottomShadow(withColor:.red)
    }
    
    @objc func refresh(_ sender: AnyObject) {
        getUserList()
    }
    
    
    // MARK: Do something
    
    func getUserList()
    {
        let request = UsersSortedList.FetchData.Request()
        interactor?.getUserList(request: request)
    }
    
    func displaySortedData(viewModel: UsersSortedList.FetchData.ViewModel)
    {
        refreshControl.endRefreshing()
        displeyedData = viewModel.displeydUserList
        tableView.reloadData()
        //nameTextField.text = viewModel.name
    }
}

extension UsersSortedListViewController : UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return displeyedData.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "UserListTableViewCell", for: indexPath) as! UserListTableViewCell
        let usersList = displeyedData[indexPath.section].users ?? []
        cell.updateCell(with: usersList)
        cell.delegate = self
        return cell
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "UserAgeTableViewCell") as! UserAgeTableViewCell
        cell.ageLabel.text = displeyedData[section].ageRange
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 145
    }
    
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }
    
}

extension UsersSortedListViewController : UserListTableViewCellDelegate {
    func userSelected(user: UserDispleyedModel) {
        router?.dataStore?.userElement = user
        router?.routeToUserPage()
    }
}

